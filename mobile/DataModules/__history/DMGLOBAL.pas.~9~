unit DMGLOBAL;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.FMXUI.Wait,
  Data.DB, FireDAC.Comp.Client, FireDAC.Phys.SQLite, FireDAC.Phys.SQLiteDef,
  FireDAC.Stan.ExprFuncs, FireDAC.Phys.SQLiteWrapper.Stat, FireDAC.Stan.Param,
  FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.Comp.DataSet, System.IOUtils;

type
  TDMTABELAS = class(TDataModule)
    Conn: TFDConnection;
    FDAtletas: TFDQuery;
    procedure ConnAfterConnect(Sender: TObject);
    procedure ConnBeforeConnect(Sender: TObject);
    procedure DataModuleCreate(Sender: TObject);
  private

    { Private declarations }
  public
   procedure ListarAtletas(id, atleta, posicao, status: string);
    { Public declarations }
  end;

var
  DMTABELAS: TDMTABELAS;

implementation

{%CLASSGROUP 'FMX.Controls.TControl'}

{$R *.dfm}

procedure TDMTABELAS.ListarAtletas(id, atleta, posicao, status: string);
begin
  with qryPedido do
    begin
        Active := false;
        SQL.Clear;
        SQL.Add('select * from tab_pedido');
        SQL.Add('where id_pedido <> '''' ');

        if id_pedido <> '' then
        begin
            SQL.Add('and id_pedido = :id_pedido');
            ParamByName('id_pedido').Value := id_pedido;
        end;

        if cliente <> '' then
        begin
            SQL.Add('and cliente like :cliente');
            ParamByName('cliente').Value := '%' + cliente + '%';
        end;

        if (dt_de > 0) and (dt_ate > 0) then
        begin
            SQL.Add('and dt_pedido >= :dt_de');
            SQL.Add('and dt_pedido <= :dt_ate');
            ParamByName('dt_de').Value := FormatDateTime('yyyy-mm-dd', dt_de);
            ParamByName('dt_ate').Value := FormatDateTime('yyyy-mm-dd', dt_ate);
        end;

        if (vl_de > 0) and (vl_de > 0) then
        begin
            SQL.Add('and vl_total >= :vl_de');
            SQL.Add('and vl_total <= :vl_ate');
            ParamByName('vl_de').Value := vl_de;
            ParamByName('vl_ate').Value := vl_ate;
        end;

        SQL.Add('order by id_pedido desc');

        Active := true;
    end;
end;

procedure TDMTABELAS.ConnAfterConnect(Sender: TObject);
begin
  Conn.ExecSQL('CREATE TABLE IF NOT EXISTS ATLETAS ( ' +
                            'ID           VARCHAR(20) NOT NULL PRIMARY KEY, ' +
                            'ATLETA            VARCHAR(100), ' +
                            'POSICAO          VARCHAR(15), ' +
                            'STATUS           VARCHAR(20));'
                );

  Conn.ExecSQL('INSERT OR REPLACE INTO ATLETAS (ID, ATLETA, POSICAO, STATUS)' +
                 'VALUES(''00001'', ''Elivelton'', ''Zagueiro'', ''ATIVO'')');

end;

procedure TDMTABELAS.ConnBeforeConnect(Sender: TObject);
begin
      //conexão sqlLite...[System.IOUtils em uses]
    Conn.DriverName := 'SQLite';

    {$IFDEF MSWINDOWS}
    Conn.Params.Values['Database'] := System.SysUtils.GetCurrentDir + '\banco.db';
    {$ELSE}
    Conn.Params.Values['Database'] := TPath.Combine(TPath.GetDocumentsPath, 'banco.bd');
    {$ENDIF}
end;

procedure TDMTABELAS.DataModuleCreate(Sender: TObject);
begin
    Conn.Connected := true;
end;

end.
